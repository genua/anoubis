.\"	$OpenBSD: mdoc.template,v 1.9 2004/07/02 10:36:57 jmc Exp $
.\"
.\" Copyright (c) 2009 GeNUA mbH <info@genua.de>
.\"
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
.\" TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
.\" PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
.\" LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
.\" NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
.\" SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd July 10, 2009
.Dt anoubisd.conf 5
.Os Anoubis
.Sh NAME
anoubisd.conf \-
.Xr anoubisd 8
configuration file
.Sh SYNOPSIS
/etc/anoubis/anoubisd.conf
.Sh DESCRIPTION
The
.Ar anoubisd.conf
file is the main configuration file for
.Xr anoubisd 8 .
It specifies various configuration options for the Anoubis daemon
process. Most of these options are Operating System specific and should
not be changed.
.Pp
Entries use the following format:
.Pp
option = value
.Pp
Lines starting with a hash mark
.Sq #
and empty lines are ignored. If a line ends with a backslash
.Sq \e
the value is continued on the next line.
.Pp
The configuration options are:
.Bl -tag -width Ds
.It \fBunixsocket\fP
Specifies the Unix Domain Socket used for communication with
clients, such as
.Xr anoubisctl 8
or
.Xr xanoubis 1 .
The default is
.Ar /var/run/anoubisd.sock .
.It \fBupgrade_mode\fP
.Xr anoubisd 8
has special support for software upgrades.
During an upgrade it will automatically recalculate checksums for
updated files.
Unsigned checksums are automatically set to the new value.
Signed checksums cannot be updated because the private keys are not available.
However, all signed checksums are marked and the new value is stored together
with the signature.
.Xr sfssig 1
or
.Xr xanoubis 1
can be used to update signed checksums after an upgrade.
The upgrade_mode option specifies how the start and end of an upgrade are
triggered.
Possible values are:
.Pp
.Ar off
- No upgrade support is enabled.
.Pp
.Ar strictlock
When the file specified with the \fBupgrade_trigger\fP option is
locked (using
.Xr flock 2
or
.Xr fcntl 2
), the upgrade starts. When the same file is unlocked
the upgrade ends.
The lockfile should be configured using the \fBupgrade_trigger\fP option.
.Pp
.Ar looselock
When the file specified by the \fBupgrade_trigger\fP option is
locked (using
.Xr flock 2
or
.Xr fcntl 2
), the upgrade starts.
When the process which has locked the file exits, the upgrade ends.
.Pp
.Ar process
The upgrade is triggered by starting a process, when it exits the
upgrade ends. The pathname of the program is configured using the
\fBupgrade_trigger\fP option.
.Pp
The default is
.Ar off .
.It \fBupgrade_trigger\fP
This option specifies a comma-separated list of upgrade triggers.
The correct value highly depends on the \fBupgrade_mode\fP option.
When
.Sq strictlock
or
.Sq looselock
is configured this option should contain the pathname of
at least one lock file. If
.Sq process
is configured this option should specify
the pathname of an upgrade program. If more than one value is
configured then any match will trigger the upgrade process.
.Pp
By default no trigger is configured.
.Pp
.It \fBrootkey\fP
This option can be used to provide the private key of root to the daemon.
If present this key will be used to update signed checksums transparently
during an update.
If the key is protected with a passphrase,
.Xr anoubisctl 1
must be used to unlock the key prior to the upgrade.
.It \fBrootkey_required\fP
This option specifies what happens if an upgrade starts and the private
key of root is not available, e.g. because the file does not exist or
because the key is protected by a passphrase and has not been unlocked.
Possible values are
.Sq true
or
.Sq false,
The default is
.Sq false.
If the root key is required the upgrading process will not be allowed
to acquire the file lock and the upgrade will fail.
Otherwise, the upgrade proceeds as normal and signed checksums of root
will be marked in the same way as user checksums.
.Pp
.It \fBauth_mode\fP
This option specifies, if an Anoubis client is authenticated, when it
tries to open a connection to the Anoubis server.
Authentication is performed against the user's certificate.
It needs to be stored in the daemon certificate-directory, usually
.Ar /var/lib/anoubis/policy/pubkeys .
A certificate is identified by its file-name, it is the uid of the assigned
user.
.Pp
Possible values of the \fBauth_mode\fP option are:
.Pp
.Ar enabled
Authentication is enabled.
The connection is accepted by the daemon, if the client tries to establishes
the connection with the correct key.
.Pp
.Ar optional
Authentication is enabled, if the certificate is stored in the
certificate-directory of the daemon.
If no such certificate exists, the connection is accepted everytime.
.Pp
.Ar off
No authentication is performed.
Every connection-attempt is accepted by the server.
.Pp
The default is
.Ar optional .
.Pp
.It \fBpolicysize\fP
Specifies the maximum size of a policy in bytes.
Policies larger than this value are rejected by the daemon.
If 0 is configured the check is turned off.
.Pp
The default is 20971520 (20MB).
.Pp
.It \fBcommit\fP
Specifies one playground content scanner that is applied during commit of
playground files. Multiple commit options can be specified in the same
configuration file to configure a number of content scanners that will
be applied independently.

The value for each commit option must have the following syntax:
\fIrequired|recommended scanner-path scanner-description\fP

\fIrequired|recommended\fP - Each scanner must be either required or
recommended. Recommended scanners are optional. They may be ignored if the
user requests it. Required scanners are mandatory and cannot be ignored. A
negative result from a required scanner always prevents the file from being
committed.

\fIscanner-path\fP - Specifies the absolute path to the scanner binary. No
command line options can be given.
Two special scanners \fBallow\fP and \fBdeny\fP are supported to simplify
configuration.
These scanners always accept or reject a file.
These scanners still need a \fIscanner-description\fP.
See the section titled \fBPLAYGROUND SCANNER INTERFACE\fP for more
information on the interface to other scanners.

\fIscanner-description\fP - A human readable short description or title of
the scanner. This description will be displayed in the GUI or the CLI to
refer to this scanner.

\fBNote:\fP The \fBdefault\fP if no scanner is given is to \fBdeny\fP
commits from a playground to the production system.
.Pp
.It \fBscanner_timeout\fP
Specifies the amount of time (in seconds) that each scanner is allowed
to run before it is terminated. Note that the timer granularity is only
about 10 seconds. The default for this value is a five minutes timeout
for each scanner.
.El
.Pp
.Sh PLAYGROUND SCANNER INTERFACE
A playground scanner can be configured by the administrator to prevent
users from committing files from a playground environment to the
production system.
Each time a file is about to be committed to the production system, all
configured content scanners are called and each of them can veto the
action.
The user can instruct the anoubisd daemon to skip scanners that are
marked as \fIrecommended\fP in the config file.

All scanners run with the privileges of a special user called _anoubisscan.
The current working directory of the scanners is the home directory of the
_anoubisscan user.
Scanning will fail if this directory does not exist.

The file to scan is available read only on stdin.
The file descriptor of this file references the inode on disk
directly, i.e. it can be used as an argument to
.Xr lseek 2
or
.Xr fstat 2 .
If an existing third party scanner insists on file name instead of a
file descriptor to scan, a wrapper script should spool the file in a
designated spool directory.
The recommended path for this is spool directory is /var/spool/anoubis
and the spool directory should only be accessible by the _anoubisscan
user.

The scanner should exit with a zero exit code if committing the file is
allowed.
If the scanner wants to veto the commit it should exit with a non-zero
exit code.
In the latter case the scanner should output the reason for the veto in
a human readable form to stdout and/or stderr.
This output will be reported to the user.
Output of a single scanner must not exceed 1kb and total output of
all scanners must not exceed 8kb.
The latter limit includes the scanner descriptions given in the config file.
.Pp
.Sh SEE ALSO
.Xr anoubisd 8
.Sh AUTHORS
Robin Doer
