.\"	$OpenBSD: mdoc.template,v 1.9 2004/07/02 10:36:57 jmc Exp $
.\"
.\" Copyright (c) 2007 GeNUA mbH <info@genua.de>
.\"
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
.\" TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
.\" PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
.\" LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
.\" NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
.\" SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd February 29, 2008
.Dt ANOUBIS_SERVER 3
.Os Anoubis
.Sh NAME
.Nm struct anoubis_server
.Nm anoubis_server_create
.Nm anoubis_server_destroy
.Nm anoubis_server_start
.Nm anoubis_server_process
.Nm anoubis_server_eof
.Nm anoubis_dispatch_create
.Nm anoubis_server_getnotify
.Nm anoubis_server_getchannel
.Nm anoubis_server_getauth
.Nd Server side protocol handler
.Sh SYNOPSIS
.In anoubis_msg.h
.In anoubis_server.h
.Ft struct anoubis_server *
.Fn anoubis_server_create "struct achat_channel * chan"
.Ft void
.Fn anoubis_server_destroy "struct anoubis_server *"
.Ft int
.Fn anoubis_server_start "struct anoubis_server *"
.Ft int
.Fn anoubis_server_process "struct anoubis_server *" "void * buf" "size_t len"
.Ft int
.Fn anoubis_server_eof "struct anoubis_server * server"
.Ft int
.Fn anoubis_dispatch_create "struct anoubis_server * server" "int opcode" "void (*disp)(struct anoubis_server *, struct anoubis_msg *, uid_t, void *)" "void *arg"
.Ft struct anoubis_notify_group *
.Fn anoubis_server_getnotify "struct anoubis_server * server"
.Ft struct achat_channel *
.Fn anoubis_server_getchannel "struct anoubis_server * server"
.Ft struct anoubis_auth *
.Fn anoubis_server_getauth "struct anoubis_server *server"
.Sh DESCRIPTION
This module is used to handle the server side of the anoubis protocol.
Messages are sent via the channel specified to
.Nm anoubis_server_create.
An existing server can be destroyed by a call to
.Nm anoubis_server_destroy.
.Pp
The function
.Nm anoubis_server_start
must be called before the server can actually process messages.
This function sends the initial HELLO protocol message to the client.
.Pp
Incoming messages must be fed into the server by calling
.Nm anoubis_server_process.
The server does not listen for messages itself.
Processing of messages is asynchronous, i.e. the server does not block
for IO while processing messages.
The message itself is not freed or resized by the server.
This allows a caller to use a static buffer for the message data.
.Pp
Notify request to the client should be sent through an a notify object
that might be associated with the server handle.
This notify object can be retrieved with
.Nm anoubis_server_getnotify .
.Pp
The channel associated with the server can be retrieved by calling
.Nm anoubis_server_getchannel
and the authenication object can be retrieved by calling
.Nm anoubis_server_getauth .
.Pp
The function
.Nm anoubis_dispatch_create
must be used to install handlers for message types that are not handled by
the protocol layer directly.
Each server must at least supply a handler for messages of type
.Nm ANOUBIS_C_AUTHDATA .
These messages are exchanged during the connection handshake and are used
to handle client authentication. See
.Xr anoubis_auth 3
for details.
.Sh RETURN VALUES
.Nm anoubis_server_create
returns the new server or NULL on error.
.Pp
.Nm anoubis_server_start
returns zero on success or a negative errno value on failure.
.Pp
.Nm anoubis_server_eof
return true if the underlying connection has been shut down and false
otherwise.
.Pp
.Nm anoubis_server_getnotify ,
.Nm anoubis_server_getauth
and
.Nm anoubis_server_getchannel
return the notify, authentication or channel object associated with the
server or NULL if there is none.
.Pp
.Nm anoubis_notify_process
returns a negative errno value on error, zero if the message is
syntactically correct but could not be processed because it did not
fit into the current communication and true if the message was successfully
processed.
.Pp
.Nm anoubis_dispatch_create
returns zero on success or a negative errno value in case of an error.
.Sh SEE ALSO
.Xr anoubis_msg 3 ,
.Xr anoubis_transaction 3 ,
.Xr anoubis_client 3 ,
.Xr anoubis_server 3 ,
.Xr anoubis_auth 3 ,
.Sh AUTHORS
Christian Ehrhardt <ehrhardt@genua.de>
