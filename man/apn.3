.\"	$OpenBSD: mdoc.template,v 1.9 2004/07/02 10:36:57 jmc Exp $
.\"
.\" Copyright (c) 2008 GeNUA mbH <info@genua.de>
.\"
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
.\" TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
.\" PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
.\" LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
.\" NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
.\" SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\" The following requests are required for all man pages.
.Dd February 14, 2008
.Dt APN 3
.Os Anoubis
.Sh NAME
.Nm apn_parse
.Nd APN library functions
.Sh SYNOPSIS
.Fd #include <apn.h>
.Ft int
.Fn apn_parse "const char *filename" "struct apnruleset *ruleset" "int flags"
.Ft int
.Fn apn_add_alfrule "struct apn_rule *rule" "struct apn_ruleset *ruleset"
.Ft int
.Fn apn_add_sfsrule "struct apn_rule *rule" "struct apn_ruleset *ruleset"
.Ft int
.Fn apn_print_rule "struct apn_rule *rule" "int flags" "FILE *file"
.Ft int
.Fn apn_print_ruleset "struct apn_ruleset *ruleset" "int flags" "FILE *file"
.Ft void
.Fn apn_print_errors "struct apn_ruleset *ruleset" "FILE *file"
.Ft int
.Fn apn_insert "struct apn_ruleset *" "struct apn_rule *" "int"
.Ft int
.Fn apn_insert_alfrule "struct apn_ruleset *" "struct apn_alfrule *" "int"
.Ft int
.\" The following line cannot be wrapped, the parameters have to be on one line
.Fn apn_copyinsert "struct apn_ruleset *" "struct apn_alfrule *" "int" "const char *" "const char *" "int"
.Ft void
.Fn apn_free_ruleset "struct apn_ruleset *ruleset"
.Sh DESCRIPTION
These functions implement the APN parser.
.Pp
.Bl -tag -width Ds -compact
.It Fn apn_parse filename ruleset flags
The function
.Fn apn_parse
parses the file specified by
.Fa filename .
The parsed rule set is stored in a structure pointed to by
.Fa ruleset
and which is allocated by
.Fn apn_parse .
The caller has to take care of freeing it.
.Pp
With the argument
.Fa flags
the following flags can be set:
.Pp
.Bl -tag -width APN_FLAG_VERBOSE2 -compact -offset indent
.It Dv APN_FLAG_VERBOSE
produce verbose output
.It Dv APN_FLAG_VERBOSE2
produce even more verbose output.
.El
.Pp
.It Fn apn_add_alfrule rule ruleset
The function
.Fn apn_add_alfrule
adds a single ALF rule
.Em rule
of type
.Em struct apn_rule
to the rule set
.Em ruleset
of type
.Em struct apn_ruleset .
.Pp
.It Fn apn_add_sfsrule rule ruleset
The function
.Fn apn_add_sfsrule
adds a single SFS rule
.Em rule
of type
.Em struct sfs_rule
to the rule set
.Em ruleset
of type
.Em struct apn_ruleset .
.Pp
.It Fn apn_print_rule rule flags file
The function
.Fn apn_print_rule
prints a parsed rule of type
.Em struct apn_rule
to the filehandle
.Em file .
The parameter
.Em flags
may contain the flag
.Em APN_FLAG_VERBOSE2 .
If this flags is set, the numeric rule ID will be prefix the actual rule.
.Pp
.It Fn apn_print_ruleset ruleset flags file
The function
.Fn apn_print_ruleset
prints a full rule set of type
.Em struct apn_ruleset
to the filehandle
.Em file .
The parameter
.Em flags
may contain the flag
.Em APN_FLAG_VERBOSE2 .
If this flags is set, the numeric rule ID will be prefix the actual rule.
.Pp
.It Fn apn_print_errors ruleset file
The function
.Fn apn_print_errors
prints the error messages generated while parsing a rule set with the
function
.Fn apn_parse
to the filehandle
.Em file .
.Pp
.It Fn apn_insert ruleset rule ID
The function
.Fn apn_insert
inserts an application rule
.Em rule
of type
.Em struct apn_rule
to the rule set rule
.Em ruleset
of type
.Em struct apn_ruleset .
The rule
.Em rule
is an application rule, ie. it contains one or more specifications
for application and rules, either of type
.Em APN_ALF
or
.Em APN_SFS .
The rule is inserted before the application rule with the identifier
.Em ID .
If that particular rule is not found, the rule is not added to the rule set.
Otherwise, it is inserted and the IDs in the rule are updated according
to the IDs already used in the rule set.
.Pp
.It Fn apn_insert_alfrule ruleset alfrule id
The fucntion
.Fn apn_insert_alfrule
inserts an ALF rule
.Em alfrule
of type
.Em struct apn_alfrule
to the rule set
.Em ruleset
of type
.Em struct apn_ruleset .
The ALF rule
.Em  rule
is a single ALF rule and is inserted before the ALF rule with the
identifier
.Em ID .
If that particular rule is not found, the rule is not added to the rule set.
Otherwise, it is inserted and the ID of the rule is updated according
to the IDs already used in the rule set.
.Pp
.It Fn apn_copyinsert ruleset alfrule id filename checksum type
The function
.Fn apn_copyinsert
copies the full application rule from the rule set
.Em ruleset
that includes the ALF rule with ID
.Em id
and inserts the provided ALF rule
.Em alfrule
in the new rule set before that particular rule.
The application specification is derived from the provided filename
.Em filename
and the checksum
.Em checksum
of type
.Em type .
The only valid value is
.Em APN_HASH_SHA256 .
Note, that context rules are not copied!
.Pp
As an example, consider the following rule set with a single application rule:
.Bd -literal
2: foobar 0xdeadbeef {
0:	default ask
1:	context new any
}
.Ed
.Pp
Calling
.Fn apn_copyinsert
with a new rule, some new application and the ID 0 will produce the
following rule set:
.Bd -literal
5: <some new application> {
3:	<new rule>
4:	default ask
}
2: foobar 0xdeadbeef {
0:	default ask
1:	context new any
}
.Ed
.Pp
.It Fn apn_free_ruleset ruleset
The function
.Fn apn_free_ruleset
frees all data structures contained in the rule set
.Em ruleset
of type
.Em struct apn_ruleset .
The argument
.Em ruleset
is freed, too.
.El
.Pp
.Sh RULE SETS
A full rule set is defined by the structure
.Em struct apn_ruleset :
.Bd -literal
struct apn_ruleset {
       int                     flags;

       /* Rulesets and variables */
       struct apnrule_queue    alf_queue;
       struct apnrule_queue    sfs_queue;
       struct apnvar_queue     var_queue;

	/* Error messages from the parser */
	struct apnerr_queue     err_queue;
};
.Ed
.Pp
The
.Em apn_ruleset
has the following members:
.Bl -tag -width alf_queue
.It Fa flags
Contains a copy of the flags passed to
.Fn apn_parse .
These are used internally by the library, eg.
.Fn apn_print_rule
checks these flags for
.Em APN_FLAG_VERBOSE2
to produce more verbose output.
.It Fa alf_queue
The TAILQ
.Pf ( see Xr queue 3bsd )
contains all ALF rules.
This queue holds structures of type
.Em struct apn_rule .
.It Fa sfs_queue
Similarly,
.Em sfs_queue contains all SFS rules.
This queue holds structures of type
.Em struct apn_rule .
.It Fa var_queue
In this queue, all variables are stored.
This queue holds structures of type
.Em struct apn_rule .
Note, this is not fully implemented yet!
.It Fa err_queue
This queue contains all error messages produced while parsing a file.
The error messages are of type
.Em struct apn_errmsg .
The function
.Fn apn_print_errors
prints all messages in this queue to
.Em stdout .
.El
The next central data structure is
.Em struct apn_rule :
.Bd -literal
struct apn_rule {
	TAILQ_ENTRY(apn_rule)    entry;
	u_int8_t                 type;
	int                      id;

	struct apn_app          *app;

	union {
		struct apn_alfrule      *alf;
		struct apn_sfsrule      *sfs;
	} rule;

	struct apn_rule         *tail;
	struct apn_rule         *next;
};
.Ed
.Pp
The ALF uses a set of several rules for each application.
Such a set of rules is a list of
.Em struct apn_rule
structures linked via the fields
.Em next
and
.Em tail .
.Pp
The first structure of such a list defines the application using the field
.Em app .
This field is either by empty (ie. any application would match this set
of rules) or points to a stucture
.Em struct apn_app
specifying one or more applications.
The first structures of such rule chains are linked together using a TAILQ,
defined by the field
.Em entry .
The TAILQ head is the field
.Em alf_queue
in
.Em struct apn_ruleset .
This means, a ALF rule set consists of chains of rules linked together,
where each chain defines the structures of type
.Em struct apn_rule
for a particular application or a set of applications.
.Pp
SFS rules use a set of
.Em struct apn_rule
linked together using a TAILQ, the head is the field
.Em sfs_queue
in
.Em struct apn_ruleset .
Thus a SFS rule set consists of linked list of structures of type
.Em struct apn_rule .
.\" The following requests should be uncommented and used where appropriate.
.\" This next request is for sections 2, 3, and 9 function return values only.
.\" .Sh DIAGNOSTICS
.\" The next request is for sections 2, 3, and 9 error and signal handling only.
.Sh RETURN VALUES
These functions return 0 to indicate success and a positive non-zero
error code to indicate failure.
In case of an internal error, e.g. a failed call to
.Xr malloc 3 ,
the code -1 is returned and errno can be evaluated.
.Sh SEE ALSO
.Xr errno 2 ,
.Xr malloc 3
.\" .Sh STANDARDS
.\" .Sh HISTORY
.Sh AUTHORS
Hans-Joerg Hoexer
.\" .Sh CAVEATS
.\" .Sh BUGS
