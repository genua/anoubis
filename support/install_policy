#!/usr/bin/perl

##########################################################################
# Copyright (c) 2008 GeNUA mbH <info@genua.de>
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##########################################################################

use strict;
use warnings "all";
use Getopt::Std;
use File::Path;
use User::pwent;

my $opt = {};
getopts("hqno",$opt) || usage();

my $Quiet     = $opt->{q};
my $No_Rename = $opt->{n};
my $No_Chown  = $opt->{o};
$opt->{h} and usage();

usage() if (scalar @ARGV != 2);

# create dummy sha256 sums for nonexistant files
my $dummy = 0;

my $user = '_anoubisd';
my $anoubis_pw = getpw($user);
my $uid;
my $gid;
if (!$No_Chown) {
	if (! defined $anoubis_pw) {
		die ("No such user: $user\n");
	}
	$uid = $anoubis_pw->uid;
	$gid = $anoubis_pw->gid;
	(defined $uid && defined $gid) or
	    die "Could not get user id of user $user\n";
}

my $source = $ARGV[0];
my $target = $ARGV[1];
-d "$source" or die "directory $source does not exist\n";
-d "$target" or die "directory $target does not exist\n";

opendir(my $dirh, "$source")
    or die "could not open $source\n";
my @files = readdir($dirh) or die;
closedir($dirh);
@files = grep { ! m{^\.} } @files;

foreach my $file (@files) {
	my $name;
	my $homedir = "/nonexistent";
	my $pw;

	if ($No_Rename or $file =~ /^\d+$/ or $file eq 'default') {
		$name = $file;
		$pw = getpw($name);
		if (defined($pw)) {
			$homedir = $pw->dir;
		}
	} else {
		# translate name to uid
		$pw = getpw($file);
		if (! defined $pw) {
			info ("undefined name\n");
			next;
		}
		$name = $pw->uid;
		if (! defined $name) {
			info ("undefined name\n");
			next;
		}
		if ($name !~ /^\d+$/ ) {
			info("user $file not found, ignoring: $name\n");
			next;
		}
		$homedir = $pw->dir;
	}

	process_file("$source/$file", "$target/$name", "$file", "$homedir");
}

exit(0);

##########################################################################
# Subroutines
##########################################################################

# replace "@placeholder@"
# possible placeholder:
# @progname@ replace the progname with a execution path
# @home@ replace home with the home of the user
sub get_placeholder {
	my $file = shift;
	my $home = shift;

	if ($file =~ m/^home$/) {
		if (defined($home)) {
			return $home;
		} else {
			return "/nonexistent";
		}
	}

	my $output;
	if ($file =~ /^\$([A-Za-z0-9_]+)(.*)$/ && exists $ENV{$1} ) {
		$output = "$ENV{$1}$2";
	} else {
		$output = `which $file 2>/dev/null`;
		chomp $output;
	}
	if ($output =~ m{^/}) {
		my $real_path = `readlink -n -f $output`;
		if ($real_path =~ m{^/}) {
			return $real_path;
		} else {
			return $output;
		}
	} else {
		info("could not find '$file'\n");
		return "/usr/bin/$file";
	}
}

sub process_file {
	my ($source, $target, $user, $homedir) = @_;

	if (-e $target) {
		info("$target already exists, ignoring $source\n");
		return;
	}

	open(my $inh,  "<", $source) or die "could not open $source: $!\n";
	open(my $outh, ">", $target) or die "could not open $target: $!\n";

	my $line;
	while (defined ($line = <$inh>)) {
		chomp $line;
		while ( $line =~ s{\\$}{} ) {
			my $newline = <$inh>;
			defined $newline
			    or die "invalid continuation in $source: $.\n";
			chomp $newline;
			$line .= $newline;
		}

		# replace "@placeholder@"
		# possible placeholder:
		# @progname@ replace the progname with a execution path
		# @home@ replace home with the home of the user
		$line =~ s{\@(\S+)\@}{get_placeholder($1, $homedir)}ge;

		print $outh "$line\n";
	}

	close($inh);
	close($outh);

	if (!$No_Chown) {
		chown $uid, $gid, $target;
		chmod 0600, $target;
	}
	info("created new policy $target\n");
}

sub usage {
	print STDERR << "EOF";
usage: $0 [-hqno] <source_dir> <target_dir>
EOF
	print STDERR << 'EOF';
Copies policy directory tree and:
- renames files from "username" to "numerical uid" (unless -n is given)
- replaces "@prog@" placeholders by full path to program
- chowns the resulting files to $user (unless -o is given)

Options:
  -o : do not chown
  -n : do not rename
  -q : be quiet
  -h : print this usage message
EOF
	exit(1);
}

sub info {
	print STDERR @_ unless $Quiet;
}
