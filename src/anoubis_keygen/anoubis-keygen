#!/usr/bin/env perl

##########################################################################
# Copyright (c) 2009 GeNUA mbH <info@genua.de>
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##########################################################################

use strict;
use warnings FATAL => "all";
use File::Basename;
use File::Path;
use Getopt::Std;
use POSIX qw(WEXITSTATUS);

my $interactive = 1;
my $keydir = $ENV{'HOME'} . "/.xanoubis";
my $crypto = "aes256";
my $numbits = 2048;

my $country = "/C=";
my $state = "/ST=";
my $city = "/L=";
my $org = "/O=";
my $unit = "/OU=";
my $Cname = "/CN=";
my $mail = "/emailAddress=";

# use gecos for DN
my ($name, $gcos) = (getpwuid($<))[0,6];
if (defined($gcos) and length($gcos)) {
	$name = $gcos;
	$name =~ s!,.*!!;
}

my $subject = "'/CN=$name'";

my %path = (
	"key"		=> "$keydir/default.key",
	"certificate"	=> "$keydir/default.crt",
);

my %cmd = (
	"key"		=> "openssl genrsa -out ",
	"certificate"	=> "openssl req -new -x509 -days 730 -batch ",
);

my $opts = {};
getopts("bh", $opts) || HELP_MESSAGE();
HELP_MESSAGE() if $opts->{h};
$interactive = 0 if $opts->{b};

foreach my $type ("key", "certificate") {
	my $short = $path{$type};
	$short =~ s!^$ENV{'HOME'}!~!;

	if ($interactive) {
		print "Enter file in which to save the $type ($short): ";
		my $input = <STDIN>;
		chomp($input);

		$path{$type} = $input if (length($input));
	}

	if (! -d dirname($path{$type})) {
		print "creating directory for $type\n";
		mkpath(dirname($path{$type}))
			or die "mkdir failed: $!";
	}

	if (-e $path{$type}) {
		print $path{$type} . " already exists\n";
		exit(1);
	}
}

#encrypt or not to encrypt, that is the question.
my $pass;
while($interactive and !defined($pass)) {
	print "Enter passphrase (empty for no passphrase): ";
	system("stty -echo");
	my $fpass = <STDIN>;
	print "\nEnter same passphrase again: ";
	my $spass = <STDIN>;
	print "\n";
	system("stty echo");

	chomp ($fpass);
	chomp ($spass);

	if ($fpass eq $spass) {
		$pass = $fpass;
	} else {
		print "Passphrases do not match.  Try again.\n";
	}
}

if ($interactive) {

	print STDOUT << 'EOF';
----------------------------------------------------------------
You're about to enter the Distinguished Name also known as "DN".
For regular usage it should be ok to leave most fields blank.
If you enter '.' or hit <RETURN>, the value of the field in question
will not be used.
----------------------------------------------------------------
EOF

	my $altCountry = $ENV{'LC_ALL'} || $ENV{'LC_CTYPE'} || $ENV{'LANG'};
	if (defined($altCountry) && $altCountry =~ m/_([A-Z]{2})/) {
	    $altCountry = $1;
	} else {
	    $altCountry = "US";
	}
	print "Country Name (2 letter code) [$altCountry]: ";
	$country = get_input($country);
	$country ||= "/C=$altCountry";

	print "State or Province Name (full name): ";
	$state = get_input($state);

	print "Locality Name (eg, city): ";
	$city = get_input($city);

	print "Organization Name (eg, company): ";
	$org = get_input($org);

	print "Organizational Unit Name (eg. section): ";
	$unit = get_input($unit);

	print "Common Name (eg, YOUR name) [$name]: ";
	$Cname = get_input($Cname);
	$Cname ||= "/CN=$name";

	print "Email Address: ";
	$mail = get_input($mail);

	$subject = "'$country$state$city$org$unit$Cname$mail'";
}

$cmd{"key"} .= $path{"key"};

foreach my $prefix ("/usr", "/usr/local") {
	my $config = $prefix . "/share/anoubisd/openssl.cnf";
	$cmd{"certificate"} .= " -config $config"
		if (-f $config);
}

$cmd{"certificate"} .= " -out " . $path{"certificate"} .
	" -key " . $path{"key"} . " -subj $subject";

if ($pass) {
	$cmd{"key"} .= " -$crypto -passout fd:0";
	$cmd{"certificate"} .= " -passin fd:0";
}

$cmd{"key"} .= " $numbits";

foreach my $type ("key", "certificate") {
	eval {
		if ($pass) {
			local $SIG{PIPE} = sub
			    { die "failed to write passphrase to openssl\n" };
			open(my $pipe, "|$cmd{$type}") or
			   die "Can't execute $cmd{$type}\n";
			print $pipe $pass;
			close($pipe) or die "openssl failed:" .
			    WEXITSTATUS($?) . "\n";
		} else {
			if (system($cmd{$type}) != 0) {
				die "openssl failed:" . WEXITSTATUS($?) .
				    "\n";
			}
		}
	};
	if ($@) {
		die ucfirst($type) . " generation failed: $@";
	}

	print "Your $type has been saved in ", $path{$type}, ".\n";
}

if ($interactive) {
	my $short = $path{"certificate"};
	$short =~ s!^$ENV{'HOME'}!~!;
	print "Please run the following command to activate the certificate:\n",
		"  sudo anoubis-keyinstall -u $< $short\n";
}


# Subroutine help
sub HELP_MESSAGE {
	print	"usage: $0 [-b] [-h | --help]\n",
		"Creates a key and certificate for Anoubis.\n",
		"Options:\n",
		"  -b\t\tnon-interactive mode\n",
		"  -h or --help\tprint this message.\n",
		"\n";
	exit(1);
}

# Subroutine to request subject arguments input
sub get_input {
	my $arg = shift;

	my $input = <STDIN>;
	my $ignore = qr/^(\s*|\.)$/;
	chomp($input);

	# We need to check if country has more than two characters!
	while (($arg eq "/C=") and ($input !~ m/^..$/)) {
		print "The country code should be exactly two characters: ";
		$input = <STDIN>;
		chomp($input);
		if ($input =~ $ignore) {
			return "";
		}
	}

	if (not defined($input)) {
		return "";
	}

	if ($input =~ $ignore) {
		return "";
	}
	return $arg.$input;
}
