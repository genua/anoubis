
Anoubis Daemon Privilege Separation

The work that is done by the anoubis daemon is split into five separate
daemon processes with different privileges:

* The master process:
  This process runs with root privileges and without a chroot
  environment. It communicates with all other processes and the kernel.
  It does not communicate directly with the user though.
  The services offered to other processes are:
  - Receiving and forwarding of kernel events. Notification events are
    forwarded directly to the session process, events that require a policy
    decision are forwarded to the policy process.
  - Receiving and forwarding event answers. Answers to pending events are
    received from the policy engine and forwarded to the kernel.
  - Processing of checksum management requests received from the session
    engine.
  - Forwarding of Upgrade messages from the policy Engine to the upgrade
    process and vice versa.
  - Processing of checksum update requests from the upgrade process.
  - Generation of an upgrade end message that is sent to the session engine.
  - Loading of the root private key after a pass-phrase was received from
    the session engine.
* The upgrade process:
  This process runs with root privileges and without a chroot environment.
  It communicates only with the master process. However, the master process
  forwards messages from the upgrade process to the policy engine and vice
  versa. Services provided by the upgrade process:
  - Checksum calculation for file that are provided by the policy engine's
    upgrade tracking. The calculated checksum is sent to the master process
    which will update all unsigned checksums accordingly.
* The logger process:
  This process does not send any data. It received data from all other
  processes and logs that data to the system log-file. This process runs
  as the _anoubisd user but does not uses a chroot environment.
  Services provided:
  - Forwarding of log messages to the system log.
* The policy engine:
  This process runs as the user _anoubisd and is secured by a chroot
  environment. The chroot environment allows read only access to the
  checksum store and read/write access to the policy data base.
  Services provided by the policy engine:
  - Evaluate kernel events based on the relevant policies. Events that
    evaluate to ASK are forwarded to the session engine which will provide
    the final result for the event. The result is forwarded to the master
    process.
  - Tracking of upgrades according to the configuration file. Upgrade
    related messages are forwarded to the master process.
  - Processing of policy get and policy change requests from the session
    engine.
  - Generate policy change events to inform interested user interfaces
    after a policy was modified.
* The session engine:
  This process handles communication with the user. It is chrooted and runs
  with reduced privileges as the _anoubisd user. It is the only process
  that communicates directly with the user. Services provided:
  - Listen for incoming user connections and handles them. This includes
    multiplexing between different connections and users.
  - Forward replies to checksum requests from the master process to the user.
  - Forward upgrade notifications from the master to the user.
  - Forward kernel notifications from the master to the user.
  - Forward replies to policy get and policy change requests from the policy
    engine to the user.
  - Forward events that need a user decision from the policy engine to
    the user.
  - Forward log requests from the policy engine to the user.
  - Forward policy change messages generated by the policy engine to the
    user.

Possibilities for exploits:

Privilege separation is by its very nature a mechanism that is only relevant
if part of the privilege separated process can be exploited.
If the master or the upgrade process can be exploited this means that the
exploiter can run arbitrary code as the root user. This is nothing that
privilege separation can protect again. However, privilege separation can
prevent the effects of an exploit that affects a non-privileged part of the
daemon. These non privileged parts are:
  - the logger process
  - the session engine
  - the policy engine
The design of the anoubis Daemon allows an exploiter to shut down the
anoubisd daemon completely once one of the processes is exploited. Privilege
separation does not protect against this. Additionally, an exploited non
privileged process (except for the logger process) can arbitrarily influence
the anoubis daemon, e.g.:
  - Modify policies
  - Answer events
  - Change checksums (somewhat limited for the policy engine)
  - completely disable the anoubisd Daemon

However, all of this only affects Anoubis itself and the anoubis data in
/var/lib/anoubis/. There is no way for an exploited non privileged process
to gain root privileges or control over one of the processes running as root
using the services provided by the master and upgrade process. Such a
privilege escalation would require the exploit of an additionally security
hole in one of the privileged process.
Additionally, access to the file system for the session and the policy
engine is limited to the chroot environment that non-root processes cannot
escape from.

Measure to prevent exploits:

All messages passed between the anoubis daemon processes are length checked
at a central place that knows about all messages that are exchanged within
the anoubisd daemon. If a corrupt message is received it is dropped and the
anoubis daemon terminates. This central message length verification greatly
reduces the possibility for bugs in the code later on.

Apart from that it is the responsibility of each daemon process to check
messages received from its peers.

Conclusion:
Only the non-privileged processes policy engine and session engine are
directly exhibited to input of the user. If any bug that allows a user to
execute arbitrary code in one of these processes is exploited, the user
still cannot get root privileges without exploiting another independent
bug in one of the privileged processes.
